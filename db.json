{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":1,"renderable":0},{"_id":"source/img/article/tag.png","path":"img/article/tag.png","modified":1,"renderable":0},{"_id":"source/img/avatar/u=836347952,1658646299&fm=27&gp=0.jpg","path":"img/avatar/u=836347952,1658646299&fm=27&gp=0.jpg","modified":1,"renderable":0},{"_id":"source/img/浏览器中常见网络协议介绍/WX20181208-163842@2x.png","path":"img/浏览器中常见网络协议介绍/WX20181208-163842@2x.png","modified":1,"renderable":0},{"_id":"source/img/浏览器中常见网络协议介绍/WX20181208-163922@2x.png","path":"img/浏览器中常见网络协议介绍/WX20181208-163922@2x.png","modified":1,"renderable":0},{"_id":"source/img/浏览器中常见网络协议介绍/WX20181208-163941@2x.png","path":"img/浏览器中常见网络协议介绍/WX20181208-163941@2x.png","modified":1,"renderable":0},{"_id":"themes/zhangchuangye/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/css/beantech.min.css","path":"css/beantech.min.css","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/css/beantech.css","path":"css/beantech.css","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/css/rocket.styl","path":"css/rocket.styl","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/css/toc.styl","path":"css/toc.styl","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/css/signature.styl","path":"css/signature.styl","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/css/widget.styl","path":"css/widget.styl","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":1,"renderable":0},{"_id":"themes/zhangchuangye/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":1,"renderable":0},{"_id":"themes/zhangchuangye/source/css/images/ironman.png","path":"css/images/ironman.png","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/css/images/rocket.png","path":"css/images/rocket.png","modified":1,"renderable":1},{"_id":"themes/zhangchuangye/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"source/img/avatar/ironman.png","path":"img/avatar/ironman.png","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":1,"renderable":0},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":1,"renderable":0},{"_id":"themes/zhangchuangye/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/article/huweihuang_blog.png","path":"img/article/huweihuang_blog.png","modified":1,"renderable":0},{"_id":"source/img/header_img/tag.png","path":"img/header_img/tag.png","modified":1,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home.png","path":"img/header_img/home.png","modified":1,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"8aa56af7bcd7cd23667cbf3eb5b5c9fa4533eb60","modified":1544077140452},{"_id":"themes/zhangchuangye/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1544077140491},{"_id":"source/CNAME","hash":"3a6e2766b5e27a8e106ed41453a57776227d7b3a","modified":1544095684469},{"_id":"themes/zhangchuangye/_config.yml","hash":"e800e32847df32dacddb5202823a004557023bcd","modified":1544077140492},{"_id":"source/_posts/something-has-to-be-written.md","hash":"673fc83c10524f68275ad384dfa023b6f55ef485","modified":1544171253913},{"_id":"source/_posts/state-getters-mutations-actions.md","hash":"1a5f6f40eb9dd4586989d9e790905f958afee0fc","modified":1544860205214},{"_id":"source/about/index.md","hash":"939a026059af64f39879c33e1c6acf33a0e3764d","modified":1544147306242},{"_id":"source/archive/index.md","hash":"40c6d6d8a40f8133e48eaf8111df4a361d6ac30d","modified":1544077140457},{"_id":"source/_posts/浏览器中常见网络协议介绍.md","hash":"7c645a75a864ce832146651cea6dcbabcbd0f938","modified":1544258858107},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1544077140488},{"_id":"source/tags/index.md","hash":"f6ad1039c242795de5cd7d81781148f8c5298c28","modified":1544086271678},{"_id":"themes/zhangchuangye/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1544077140492},{"_id":"themes/zhangchuangye/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1544077140492},{"_id":"themes/zhangchuangye/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1544077140492},{"_id":"themes/zhangchuangye/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1544077140493},{"_id":"themes/zhangchuangye/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1544077140493},{"_id":"themes/zhangchuangye/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1544077140493},{"_id":"themes/zhangchuangye/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1544077140493},{"_id":"themes/zhangchuangye/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1544077140493},{"_id":"themes/zhangchuangye/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1544077140493},{"_id":"themes/zhangchuangye/layout/404.ejs","hash":"40de38bd399f6f4aef0d6c63c7b13b02d74f1c56","modified":1544077140494},{"_id":"themes/zhangchuangye/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1544077140496},{"_id":"themes/zhangchuangye/layout/archive.ejs","hash":"72a150c8dff0031a9107d12eaa7c2e6c6ce950d2","modified":1544077140496},{"_id":"themes/zhangchuangye/layout/index.ejs","hash":"dc8a6eaa00d1e7c33a40979afe0953ed5d7b512e","modified":1544077140496},{"_id":"themes/zhangchuangye/layout/layout.ejs","hash":"a5af5b99ac3456ab5da1a319455904b979b91601","modified":1544077140497},{"_id":"themes/zhangchuangye/layout/page.ejs","hash":"5e588f200a7b7cd3ae40402b0dd3b779aac6787f","modified":1544077140497},{"_id":"themes/zhangchuangye/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1544077140496},{"_id":"themes/zhangchuangye/layout/post.ejs","hash":"04d7acbc65679f5ff583aa5e73f72f2c169e4391","modified":1544077140497},{"_id":"themes/zhangchuangye/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1544077140497},{"_id":"source/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1544077140459},{"_id":"source/img/avatar/u=836347952,1658646299&fm=27&gp=0.jpg","hash":"f21fc0e32627d2320c07832ee13cbfae55fef6cb","modified":1532671003588},{"_id":"source/img/浏览器中常见网络协议介绍/WX20181208-163842@2x.png","hash":"96f1351ec5e0f01e2233f6ef39994000d0c477ce","modified":1544258499153},{"_id":"source/img/浏览器中常见网络协议介绍/WX20181208-163922@2x.png","hash":"7e4f10cae1a13bc3fde8b4bb6a414132cefb1ef5","modified":1544258499155},{"_id":"source/img/浏览器中常见网络协议介绍/WX20181208-163941@2x.png","hash":"d3967f3f620b961d948cce8bcca0f0609a5fbea2","modified":1544258499158},{"_id":"themes/zhangchuangye/layout/_partial/head.ejs","hash":"3542d15bdf73aa59f05f566b7ecd2255e83ee370","modified":1544077140494},{"_id":"themes/zhangchuangye/layout/_partial/footer.ejs","hash":"450d32fe33ad6a9226e6ac8400ac7365b483f614","modified":1544148602468},{"_id":"themes/zhangchuangye/layout/_partial/header.ejs","hash":"3bd09df76e0622d76d186b020393fcab361e6c97","modified":1544077140494},{"_id":"themes/zhangchuangye/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1544077140494},{"_id":"themes/zhangchuangye/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1544077140495},{"_id":"themes/zhangchuangye/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1544077140495},{"_id":"themes/zhangchuangye/layout/_partial/toc.ejs","hash":"40e11b303df113c64a5ca35b79dd53c824010c09","modified":1544077140495},{"_id":"themes/zhangchuangye/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1544077140495},{"_id":"themes/zhangchuangye/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1544077140495},{"_id":"themes/zhangchuangye/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1544077140495},{"_id":"themes/zhangchuangye/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1544077140496},{"_id":"themes/zhangchuangye/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1544077140496},{"_id":"themes/zhangchuangye/layout/_widget/short-about.ejs","hash":"315de02246f07c747c32495e107ad7b19cb3ff54","modified":1544077140496},{"_id":"themes/zhangchuangye/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1544077140501},{"_id":"themes/zhangchuangye/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1544077140502},{"_id":"themes/zhangchuangye/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1544077140502},{"_id":"themes/zhangchuangye/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1544077140498},{"_id":"themes/zhangchuangye/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1544077140497},{"_id":"themes/zhangchuangye/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1544077140503},{"_id":"themes/zhangchuangye/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1544077140500},{"_id":"themes/zhangchuangye/source/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1544077140498},{"_id":"themes/zhangchuangye/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1544077140500},{"_id":"themes/zhangchuangye/source/css/toc.styl","hash":"631e97f634d30f53314e2fec8bdde267c1c49f4c","modified":1544077140501},{"_id":"themes/zhangchuangye/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1544077140500},{"_id":"themes/zhangchuangye/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1544077140501},{"_id":"themes/zhangchuangye/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1544077140503},{"_id":"themes/zhangchuangye/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1544077140500},{"_id":"themes/zhangchuangye/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1544077140504},{"_id":"themes/zhangchuangye/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1544077140503},{"_id":"themes/zhangchuangye/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1544077140506},{"_id":"themes/zhangchuangye/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1544077140506},{"_id":"themes/zhangchuangye/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1544077140506},{"_id":"themes/zhangchuangye/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1544077140506},{"_id":"source/img/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1544077140473},{"_id":"themes/zhangchuangye/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1544077140502},{"_id":"themes/zhangchuangye/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1544077140499},{"_id":"themes/zhangchuangye/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1544077140505},{"_id":"themes/zhangchuangye/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1544077140503},{"_id":"source/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1544077140474},{"_id":"source/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1544077140475},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1544077140491},{"_id":"themes/zhangchuangye/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1544077140500},{"_id":"themes/zhangchuangye/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1544077140500},{"_id":"themes/zhangchuangye/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1544077140499},{"_id":"source/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1544077140465},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1544077140490},{"_id":"source/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1544077140460},{"_id":"themes/zhangchuangye/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1544077140505},{"_id":"source/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1544077140459},{"_id":"source/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1544077140488},{"_id":"source/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1544077140463},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1544077140480},{"_id":"source/img/header_img/home.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1544077140484},{"_id":"source/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1544077140471},{"_id":"public/post-sitemap.xml","hash":"03cec056bc9678b447513816ed9d522436804fee","modified":1544860229938},{"_id":"public/page-sitemap.xml","hash":"25ec5475b54828cee4c34ec394c5b705d6dd32a8","modified":1544860229979},{"_id":"public/tag-sitemap.xml","hash":"75afe1ddea3ab2d21c8fe9e7b9fee4210d67e127","modified":1544860230001},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1544860230003},{"_id":"public/sitemap.xml","hash":"5888ad852811b0ac8f2095ceb13b1f3c82897012","modified":1544860230003},{"_id":"public/404.html","hash":"6cb1a85189941ea2e27d9164cd993ea8417aacd3","modified":1544860230008},{"_id":"public/tags/index.html","hash":"34fbd0cce9690883f4da5f947ecfc087a43e51c8","modified":1544860230008},{"_id":"public/article/state-getters-mutations-actions/index.html","hash":"28d14acd2dc95ed62059cf34a7b025b0c8190365","modified":1544860230008},{"_id":"public/article/浏览器中常见网络协议介绍/index.html","hash":"d5a83cdcd5eaa0be751281372579f9a46482f974","modified":1544860230008},{"_id":"public/article/something-has-to-be-written/index.html","hash":"40602e7a9e57a251796a0af29e14975210b2a486","modified":1544860230008},{"_id":"public/archive/index.html","hash":"ea9606b890cbecc275e983b5493934f217a3c0ab","modified":1544860230008},{"_id":"public/about/index.html","hash":"f85c9f6cb87817f1051cd7cb1ae8ce3d2d75b732","modified":1544860230009},{"_id":"public/archives/index.html","hash":"89d340baa841477042a4fa105a488c25e44f3d93","modified":1544860230009},{"_id":"public/archives/2018/index.html","hash":"169d9e1e129248a570eb0f946eb74cc1720ad6ef","modified":1544860230009},{"_id":"public/archives/2018/12/index.html","hash":"d8ffd10c7ed8552614e08438a32d5a763da54189","modified":1544860230009},{"_id":"public/index.html","hash":"04cc70c8776effbdc445b8bcc7051bfb62bf8036","modified":1544860230009},{"_id":"public/tags/WEB技术/index.html","hash":"5f074d986fd24365b80723a52ef0fd2b27a09a85","modified":1544860230009},{"_id":"public/tags/随笔/index.html","hash":"d118cd01eb4ce59c2328e18a277e0a6ae63b526a","modified":1544860230009},{"_id":"public/CNAME","hash":"3a6e2766b5e27a8e106ed41453a57776227d7b3a","modified":1544860230014},{"_id":"public/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1544860230014},{"_id":"public/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1544860230014},{"_id":"public/img/avatar/u=836347952,1658646299&fm=27&gp=0.jpg","hash":"f21fc0e32627d2320c07832ee13cbfae55fef6cb","modified":1544860230014},{"_id":"public/img/浏览器中常见网络协议介绍/WX20181208-163922@2x.png","hash":"7e4f10cae1a13bc3fde8b4bb6a414132cefb1ef5","modified":1544860230014},{"_id":"public/img/浏览器中常见网络协议介绍/WX20181208-163842@2x.png","hash":"96f1351ec5e0f01e2233f6ef39994000d0c477ce","modified":1544860230014},{"_id":"public/img/浏览器中常见网络协议介绍/WX20181208-163941@2x.png","hash":"d3967f3f620b961d948cce8bcca0f0609a5fbea2","modified":1544860230014},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1544860230015},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1544860230015},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1544860230015},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1544860230015},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1544860230015},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1544860230015},{"_id":"public/img/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1544860230219},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1544860230220},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1544860230262},{"_id":"public/css/highlight.css","hash":"c58b4569c086e477a00dcbf5a95a166fe5fecfb0","modified":1544860230262},{"_id":"public/css/toc.css","hash":"f756b9e1b2208d2e5b0f3d2ac5e4fea3b7da0e10","modified":1544860230262},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1544860230262},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1544860230262},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1544860230262},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1544860230263},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1544860230263},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1544860230263},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1544860230263},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1544860230263},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1544860230263},{"_id":"public/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1544860230263},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1544860230263},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1544860230263},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1544860230263},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1544860230263},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1544860230264},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1544860230264},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1544860230264},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1544860230264},{"_id":"public/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1544860230264},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1544860230264},{"_id":"public/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1544860230264},{"_id":"public/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1544860230268},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1544860230268},{"_id":"public/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1544860230271},{"_id":"public/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1544860230279},{"_id":"public/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1544860230309},{"_id":"public/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1544860230314},{"_id":"public/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1544860230317},{"_id":"public/img/header_img/home.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1544860230320},{"_id":"public/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1544860230326}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原","header-img":"/img/header_img/404.png","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原\"\nheader-img: \"/img/header_img/404.png\"\n---\n","date":"2018-12-06T06:20:20.523Z","updated":"2018-12-06T06:19:00.452Z","path":"404.html","title":"","comments":1,"_id":"cjpp5w62n0000b1i4vpv4qx04","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"archive","title":"Archives","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2018-12-06T06:19:00.457Z","path":"archive/index.html","_id":"cjpp5w6350002b1i4roza0a2t","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2017-10-03T02:48:33.000Z","description":"走在成为极客的路上","header-img":"/img/header_img/about.jpg","aplayer":true,"fixed":false,"_content":"\n### 一句话\n\n>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)\n\n### 关于我\n\n>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，\n>\n>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！\n\n### 兴趣方向\n\n> 跨平台开发（flutter、appcan等）相关生态技术研究。\n\n### 参与社区\n\n > 博客园:https://www.cnblogs.com/zhangchuangye/\n >\n > Github:https://github.com/zhangchuangye\n >\n > Twitter:https://twitter.com/chuangye_zhang\n\n### 联系我\n\n>Email: chuangye.zhang@zymobi.com\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2017-10-03 10:48:33\ndescription: \"走在成为极客的路上\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: true\nfixed: false\n---\n\n### 一句话\n\n>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)\n\n### 关于我\n\n>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，\n>\n>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！\n\n### 兴趣方向\n\n> 跨平台开发（flutter、appcan等）相关生态技术研究。\n\n### 参与社区\n\n > 博客园:https://www.cnblogs.com/zhangchuangye/\n >\n > Github:https://github.com/zhangchuangye\n >\n > Twitter:https://twitter.com/chuangye_zhang\n\n### 联系我\n\n>Email: chuangye.zhang@zymobi.com\n\n","updated":"2018-12-07T01:48:26.242Z","path":"about/index.html","comments":1,"_id":"cjpp5w6370004b1i49yp6vgdq","content":"<h3 id=\"一句话\">一句话</h3>\n<blockquote>\n<p>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)</p>\n</blockquote>\n<h3 id=\"关于我\">关于我</h3>\n<blockquote>\n<p>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，</p>\n<p>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！</p>\n</blockquote>\n<h3 id=\"兴趣方向\">兴趣方向</h3>\n<blockquote>\n<p>跨平台开发（flutter、appcan等）相关生态技术研究。</p>\n</blockquote>\n<h3 id=\"参与社区\">参与社区</h3>\n<blockquote>\n<p>博客园:<a href=\"https://www.cnblogs.com/zhangchuangye/\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhangchuangye/</a></p>\n<p>Github:<a href=\"https://github.com/zhangchuangye\" target=\"_blank\" rel=\"noopener\">https://github.com/zhangchuangye</a></p>\n<p>Twitter:<a href=\"https://twitter.com/chuangye_zhang\" target=\"_blank\" rel=\"noopener\">https://twitter.com/chuangye_zhang</a></p>\n</blockquote>\n<h3 id=\"联系我\">联系我</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:chuangye.zhang@zymobi.com\" target=\"_blank\" rel=\"noopener\">chuangye.zhang@zymobi.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3>一句话</h3>\n<blockquote>\n<p>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)</p>\n</blockquote>\n<h3>关于我</h3>\n<blockquote>\n<p>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，</p>\n<p>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！</p>\n</blockquote>\n<h3>兴趣方向</h3>\n<blockquote>\n<p>跨平台开发（flutter、appcan等）相关生态技术研究。</p>\n</blockquote>\n<h3>参与社区</h3>\n<blockquote>\n<p>博客园:<a href=\"https://www.cnblogs.com/zhangchuangye/\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhangchuangye/</a></p>\n<p>Github:<a href=\"https://github.com/zhangchuangye\" target=\"_blank\" rel=\"noopener\">https://github.com/zhangchuangye</a></p>\n<p>Twitter:<a href=\"https://twitter.com/chuangye_zhang\" target=\"_blank\" rel=\"noopener\">https://twitter.com/chuangye_zhang</a></p>\n</blockquote>\n<h3>联系我</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:chuangye.zhang@zymobi.com\" target=\"_blank\" rel=\"noopener\">chuangye.zhang@zymobi.com</a></p>\n</blockquote>\n"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"/img/header_img/tag.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/img/header_img/tag.png\"\n---\n","date":"2018-12-06T08:51:11.678Z","updated":"2018-12-06T08:51:11.678Z","path":"tags/index.html","comments":1,"_id":"cjpp5w63y000cb1i4x0ob2mjt","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"[WEB技术]vuex所有核心概念完整解析State Getters Mutations Actions","catalog":true,"date":"2018-12-15T07:33:11.000Z","subtitle":"WEB技术","header-img":null,"_content":"\nvuex是解决vue组件和组件间相互通信而存在的，vuex理解起来稍微复杂，但一旦看懂则即为好用：\n\n安装：\n\n```\nnpm install --save vuex\n\n```\n\n引入\n\n```\nimport Vuex from 'vuex'\nimport Vue from 'vue'\nVue.use(Vuex)\n\n```\n\nvuex的几个参数的介绍\n\nState：储存初始化数据\n\nGetters：对State 里面的数据二次处理（对数据进行过滤类似filter的作用）比如State返回的为一个对象，我们想取对象中一个键的值用这个方法\n\nMutations：对数据进行计算的方法全部写在里面（类似computed） 在页面中触发时使用this.$store.commit('mutationName') 触发Mutations方法改变state的值\n\nActions：处理Mutations中已经写好的方法 其直接触发方式是 this.$store.dispatch(actionName)\n\n我们先不急着了解更多先打印下Vuex\n\n```\nconsole.log(Vuex) //Vuex为一个对象里面包含\nVuex ={\n    Store:function Store(){},    \n    mapActions:function(){},    // 对应Actions的结果集\n    mapGetters:function(){},    //对应Getters的结果集\n    mapMutations:function(){},  //对应Mutations的结果集\n    mapState:function(){},      //对应State的结果集\n    install:function install(){}, //暂时不做讲解 \n    installed:true //暂时不做讲解\n}\n//如果我们只需要里面的State时我们可以这样写\nimport { mapState } from 'vuex';\nimport { mapGetters, mapMutations } from 'vuex'; //如果需要引用多个时用这种方式处理\n```\n反复看上面的内容是不是就豁然开朗了接下来我们进行依次举例和用官方的语言描述\n\nState\n\nState负责存储整个应用的状态数据，一般需要在使用的时候在跟节点注入store对象，后期就可以使用this.$store.state直接获取状态\n\n```\n//store为实例化生成的\nimport store from './store' \n\nnew Vue({\n  el: '#app',\n  store,\n  render: h => h(App)\n})\n\n```\n\n这个store可以理解为一个容器，包含着应用中的state等。实例化生成store的过程是：　　\n\n```\n\n//./store文件\nconst store = new Vuex.Store({\n  state: {   //放置state的值\n    count: 0,\n    strLength:\"abcd234\"\n  },\n  getters: {   //放置getters方法\n      strLength: state => state.aString.length\n  },\n  mutations: {   //放置mutations方法\n       mutationName(state) {\n          //在这里改变state中的数据\n          state.count = 100;\n       }\n  },\n  // 异步的数据操作\n  actions: {      //放置actions方法\n       actionName({ commit }) {\n          //dosomething\n         commit('mutationName')\n      },\n      getSong ({commit}, id) {\n          api.getMusicUrlResource(id).then(res => {\n            let url = res.data.data[0].url;\n        \n          })\n          .catch((error) => {  // 错误处理\n              console.log(error);\n          });\n      }\n  }\n});\nexport default store;\n\n```\n\n后续在组件中使用的过程中，如果想要获取对应的状态你就可以直接使用this.$store.state获取，当然，也可以利用vuex提供的mapState辅助函数将state映射到计算属性中去，如\n\n```\n\nimport {mapState} from 'vuex'\n\nexport default {  //组件中\n  computed: mapState({\n    count: state => state.count\n  })\n}\n\n```\n\nGetters\n\n有些状态需要做二次处理，就可以使用getters。通过this.$store.getters.valueName对派生出来的状态进行访问。或者直接使用辅助函数mapGetters将其映射到本地计算属性中去。\n\n在组件中使用方式\n\n```\n\nimport {mapGetters} from 'vuex'\n\nexport default {  \ncomputed: mapGetters([\n'strLength'\n])\n}\n\n```\n\nMutations\n\nMutations的中文意思是“变化”，利用它可以更改状态，本质就是用来处理数据的函数，其接收唯一参数值state。store.commit(mutationName)是用来触发一个mutation的方法。需要记住的是，定义的mutation必须是同步函数，否则devtool中的数据将可能出现问题，使状态改变变得难以跟踪。\n\n在组件中触发：\n\n```\n\n复制代码\nexport default {\n  methods: {\n    handleClick() {\n      this.$store.commit('mutationName')\n    }\n  }\n}\n\n```\n\n或者使用辅助函数mapMutations直接将触发函数映射到methods上，这样就能在元素事件绑定上直接使用了。如：\n\n```\n\nimport {mapMutations} from 'vuex'\nexport default {\n  methods: mapMutations([\n    'mutationName'\n  ])\n}\n\n```\n\nActions\n\nActions也可以用于改变状态，不过是通过触发mutation实现的，重要的是可以包含异步操作。其辅助函数是mapActions与mapMutations类似，也是绑定在组件的methods上的。如果选择直接触发的话，使用this.$store.dispatch(actionName)方法。\n\n在组件中使用\n\n```\n\nimport {mapActions} from 'vuex'\n//我是一个组件\nexport default {\n  methods: mapActions([\n    'actionName',\n  ])\n}\n\n```\n\n Plugins\n\n插件就是一个钩子函数，在初始化store的时候引入即可。比较常用的是内置的logger插件，用于作为调试使用。\n\n```\n//写在./store文件中\nimport createLogger from 'vuex/dist/logger'\nconst store = Vuex.Store({\n  ...\n  plugins: [createLogger()]\n})\n```","source":"_posts/state-getters-mutations-actions.md","raw":"---\ntitle: \"[WEB技术]vuex所有核心概念完整解析State Getters Mutations Actions\"\ncatalog: true\ndate: 2018-12-15 15:33:11\nsubtitle: WEB技术\nheader-img: \ntags: WEB技术\n---\n\nvuex是解决vue组件和组件间相互通信而存在的，vuex理解起来稍微复杂，但一旦看懂则即为好用：\n\n安装：\n\n```\nnpm install --save vuex\n\n```\n\n引入\n\n```\nimport Vuex from 'vuex'\nimport Vue from 'vue'\nVue.use(Vuex)\n\n```\n\nvuex的几个参数的介绍\n\nState：储存初始化数据\n\nGetters：对State 里面的数据二次处理（对数据进行过滤类似filter的作用）比如State返回的为一个对象，我们想取对象中一个键的值用这个方法\n\nMutations：对数据进行计算的方法全部写在里面（类似computed） 在页面中触发时使用this.$store.commit('mutationName') 触发Mutations方法改变state的值\n\nActions：处理Mutations中已经写好的方法 其直接触发方式是 this.$store.dispatch(actionName)\n\n我们先不急着了解更多先打印下Vuex\n\n```\nconsole.log(Vuex) //Vuex为一个对象里面包含\nVuex ={\n    Store:function Store(){},    \n    mapActions:function(){},    // 对应Actions的结果集\n    mapGetters:function(){},    //对应Getters的结果集\n    mapMutations:function(){},  //对应Mutations的结果集\n    mapState:function(){},      //对应State的结果集\n    install:function install(){}, //暂时不做讲解 \n    installed:true //暂时不做讲解\n}\n//如果我们只需要里面的State时我们可以这样写\nimport { mapState } from 'vuex';\nimport { mapGetters, mapMutations } from 'vuex'; //如果需要引用多个时用这种方式处理\n```\n反复看上面的内容是不是就豁然开朗了接下来我们进行依次举例和用官方的语言描述\n\nState\n\nState负责存储整个应用的状态数据，一般需要在使用的时候在跟节点注入store对象，后期就可以使用this.$store.state直接获取状态\n\n```\n//store为实例化生成的\nimport store from './store' \n\nnew Vue({\n  el: '#app',\n  store,\n  render: h => h(App)\n})\n\n```\n\n这个store可以理解为一个容器，包含着应用中的state等。实例化生成store的过程是：　　\n\n```\n\n//./store文件\nconst store = new Vuex.Store({\n  state: {   //放置state的值\n    count: 0,\n    strLength:\"abcd234\"\n  },\n  getters: {   //放置getters方法\n      strLength: state => state.aString.length\n  },\n  mutations: {   //放置mutations方法\n       mutationName(state) {\n          //在这里改变state中的数据\n          state.count = 100;\n       }\n  },\n  // 异步的数据操作\n  actions: {      //放置actions方法\n       actionName({ commit }) {\n          //dosomething\n         commit('mutationName')\n      },\n      getSong ({commit}, id) {\n          api.getMusicUrlResource(id).then(res => {\n            let url = res.data.data[0].url;\n        \n          })\n          .catch((error) => {  // 错误处理\n              console.log(error);\n          });\n      }\n  }\n});\nexport default store;\n\n```\n\n后续在组件中使用的过程中，如果想要获取对应的状态你就可以直接使用this.$store.state获取，当然，也可以利用vuex提供的mapState辅助函数将state映射到计算属性中去，如\n\n```\n\nimport {mapState} from 'vuex'\n\nexport default {  //组件中\n  computed: mapState({\n    count: state => state.count\n  })\n}\n\n```\n\nGetters\n\n有些状态需要做二次处理，就可以使用getters。通过this.$store.getters.valueName对派生出来的状态进行访问。或者直接使用辅助函数mapGetters将其映射到本地计算属性中去。\n\n在组件中使用方式\n\n```\n\nimport {mapGetters} from 'vuex'\n\nexport default {  \ncomputed: mapGetters([\n'strLength'\n])\n}\n\n```\n\nMutations\n\nMutations的中文意思是“变化”，利用它可以更改状态，本质就是用来处理数据的函数，其接收唯一参数值state。store.commit(mutationName)是用来触发一个mutation的方法。需要记住的是，定义的mutation必须是同步函数，否则devtool中的数据将可能出现问题，使状态改变变得难以跟踪。\n\n在组件中触发：\n\n```\n\n复制代码\nexport default {\n  methods: {\n    handleClick() {\n      this.$store.commit('mutationName')\n    }\n  }\n}\n\n```\n\n或者使用辅助函数mapMutations直接将触发函数映射到methods上，这样就能在元素事件绑定上直接使用了。如：\n\n```\n\nimport {mapMutations} from 'vuex'\nexport default {\n  methods: mapMutations([\n    'mutationName'\n  ])\n}\n\n```\n\nActions\n\nActions也可以用于改变状态，不过是通过触发mutation实现的，重要的是可以包含异步操作。其辅助函数是mapActions与mapMutations类似，也是绑定在组件的methods上的。如果选择直接触发的话，使用this.$store.dispatch(actionName)方法。\n\n在组件中使用\n\n```\n\nimport {mapActions} from 'vuex'\n//我是一个组件\nexport default {\n  methods: mapActions([\n    'actionName',\n  ])\n}\n\n```\n\n Plugins\n\n插件就是一个钩子函数，在初始化store的时候引入即可。比较常用的是内置的logger插件，用于作为调试使用。\n\n```\n//写在./store文件中\nimport createLogger from 'vuex/dist/logger'\nconst store = Vuex.Store({\n  ...\n  plugins: [createLogger()]\n})\n```","slug":"state-getters-mutations-actions","published":1,"updated":"2018-12-15T07:50:05.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpp5w6310001b1i4ihzp96vp","content":"<p>vuex是解决vue组件和组件间相互通信而存在的，vuex理解起来稍微复杂，但一旦看懂则即为好用：</p>\n<p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save vuex</span><br></pre></td></tr></table></figure>\n<p>引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vuex from &apos;vuex&apos;</span><br><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">Vue.use(Vuex)</span><br></pre></td></tr></table></figure>\n<p>vuex的几个参数的介绍</p>\n<p>State：储存初始化数据</p>\n<p>Getters：对State 里面的数据二次处理（对数据进行过滤类似filter的作用）比如State返回的为一个对象，我们想取对象中一个键的值用这个方法</p>\n<p>Mutations：对数据进行计算的方法全部写在里面（类似computed） 在页面中触发时使用this.$store.commit(‘mutationName’) 触发Mutations方法改变state的值</p>\n<p>Actions：处理Mutations中已经写好的方法 其直接触发方式是 this.$store.dispatch(actionName)</p>\n<p>我们先不急着了解更多先打印下Vuex</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Vuex) //Vuex为一个对象里面包含</span><br><span class=\"line\">Vuex =&#123;</span><br><span class=\"line\">    Store:function Store()&#123;&#125;,    </span><br><span class=\"line\">    mapActions:function()&#123;&#125;,    // 对应Actions的结果集</span><br><span class=\"line\">    mapGetters:function()&#123;&#125;,    //对应Getters的结果集</span><br><span class=\"line\">    mapMutations:function()&#123;&#125;,  //对应Mutations的结果集</span><br><span class=\"line\">    mapState:function()&#123;&#125;,      //对应State的结果集</span><br><span class=\"line\">    install:function install()&#123;&#125;, //暂时不做讲解 </span><br><span class=\"line\">    installed:true //暂时不做讲解</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//如果我们只需要里面的State时我们可以这样写</span><br><span class=\"line\">import &#123; mapState &#125; from &apos;vuex&apos;;</span><br><span class=\"line\">import &#123; mapGetters, mapMutations &#125; from &apos;vuex&apos;; //如果需要引用多个时用这种方式处理</span><br></pre></td></tr></table></figure>\n<p>反复看上面的内容是不是就豁然开朗了接下来我们进行依次举例和用官方的语言描述</p>\n<p>State</p>\n<p>State负责存储整个应用的状态数据，一般需要在使用的时候在跟节点注入store对象，后期就可以使用this.$store.state直接获取状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//store为实例化生成的</span><br><span class=\"line\">import store from &apos;./store&apos; </span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &apos;#app&apos;,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: h =&gt; h(App)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这个store可以理解为一个容器，包含着应用中的state等。实例化生成store的过程是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//./store文件</span><br><span class=\"line\">const store = new Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;   //放置state的值</span><br><span class=\"line\">    count: 0,</span><br><span class=\"line\">    strLength:&quot;abcd234&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;   //放置getters方法</span><br><span class=\"line\">      strLength: state =&gt; state.aString.length</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;   //放置mutations方法</span><br><span class=\"line\">       mutationName(state) &#123;</span><br><span class=\"line\">          //在这里改变state中的数据</span><br><span class=\"line\">          state.count = 100;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 异步的数据操作</span><br><span class=\"line\">  actions: &#123;      //放置actions方法</span><br><span class=\"line\">       actionName(&#123; commit &#125;) &#123;</span><br><span class=\"line\">          //dosomething</span><br><span class=\"line\">         commit(&apos;mutationName&apos;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      getSong (&#123;commit&#125;, id) &#123;</span><br><span class=\"line\">          api.getMusicUrlResource(id).then(res =&gt; &#123;</span><br><span class=\"line\">            let url = res.data.data[0].url;</span><br><span class=\"line\">        </span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .catch((error) =&gt; &#123;  // 错误处理</span><br><span class=\"line\">              console.log(error);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">export default store;</span><br></pre></td></tr></table></figure>\n<p>后续在组件中使用的过程中，如果想要获取对应的状态你就可以直接使用this.$store.state获取，当然，也可以利用vuex提供的mapState辅助函数将state映射到计算属性中去，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import &#123;mapState&#125; from &apos;vuex&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;  //组件中</span><br><span class=\"line\">  computed: mapState(&#123;</span><br><span class=\"line\">    count: state =&gt; state.count</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Getters</p>\n<p>有些状态需要做二次处理，就可以使用getters。通过this.$store.getters.valueName对派生出来的状态进行访问。或者直接使用辅助函数mapGetters将其映射到本地计算属性中去。</p>\n<p>在组件中使用方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import &#123;mapGetters&#125; from &apos;vuex&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;  </span><br><span class=\"line\">computed: mapGetters([</span><br><span class=\"line\">&apos;strLength&apos;</span><br><span class=\"line\">])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Mutations</p>\n<p>Mutations的中文意思是“变化”，利用它可以更改状态，本质就是用来处理数据的函数，其接收唯一参数值state。store.commit(mutationName)是用来触发一个mutation的方法。需要记住的是，定义的mutation必须是同步函数，否则devtool中的数据将可能出现问题，使状态改变变得难以跟踪。</p>\n<p>在组件中触发：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    handleClick() &#123;</span><br><span class=\"line\">      this.$store.commit(&apos;mutationName&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者使用辅助函数mapMutations直接将触发函数映射到methods上，这样就能在元素事件绑定上直接使用了。如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import &#123;mapMutations&#125; from &apos;vuex&apos;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  methods: mapMutations([</span><br><span class=\"line\">    &apos;mutationName&apos;</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Actions</p>\n<p>Actions也可以用于改变状态，不过是通过触发mutation实现的，重要的是可以包含异步操作。其辅助函数是mapActions与mapMutations类似，也是绑定在组件的methods上的。如果选择直接触发的话，使用this.$store.dispatch(actionName)方法。</p>\n<p>在组件中使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import &#123;mapActions&#125; from &apos;vuex&apos;</span><br><span class=\"line\">//我是一个组件</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  methods: mapActions([</span><br><span class=\"line\">    &apos;actionName&apos;,</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Plugins</p>\n<p>插件就是一个钩子函数，在初始化store的时候引入即可。比较常用的是内置的logger插件，用于作为调试使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//写在./store文件中</span><br><span class=\"line\">import createLogger from &apos;vuex/dist/logger&apos;</span><br><span class=\"line\">const store = Vuex.Store(&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  plugins: [createLogger()]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>vuex是解决vue组件和组件间相互通信而存在的，vuex理解起来稍微复杂，但一旦看懂则即为好用：</p>\n<p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save vuex</span><br></pre></td></tr></table></figure>\n<p>引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vuex from &apos;vuex&apos;</span><br><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">Vue.use(Vuex)</span><br></pre></td></tr></table></figure>\n<p>vuex的几个参数的介绍</p>\n<p>State：储存初始化数据</p>\n<p>Getters：对State 里面的数据二次处理（对数据进行过滤类似filter的作用）比如State返回的为一个对象，我们想取对象中一个键的值用这个方法</p>\n<p>Mutations：对数据进行计算的方法全部写在里面（类似computed） 在页面中触发时使用this.$store.commit(‘mutationName’) 触发Mutations方法改变state的值</p>\n<p>Actions：处理Mutations中已经写好的方法 其直接触发方式是 this.$store.dispatch(actionName)</p>\n<p>我们先不急着了解更多先打印下Vuex</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Vuex) //Vuex为一个对象里面包含</span><br><span class=\"line\">Vuex =&#123;</span><br><span class=\"line\">    Store:function Store()&#123;&#125;,    </span><br><span class=\"line\">    mapActions:function()&#123;&#125;,    // 对应Actions的结果集</span><br><span class=\"line\">    mapGetters:function()&#123;&#125;,    //对应Getters的结果集</span><br><span class=\"line\">    mapMutations:function()&#123;&#125;,  //对应Mutations的结果集</span><br><span class=\"line\">    mapState:function()&#123;&#125;,      //对应State的结果集</span><br><span class=\"line\">    install:function install()&#123;&#125;, //暂时不做讲解 </span><br><span class=\"line\">    installed:true //暂时不做讲解</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//如果我们只需要里面的State时我们可以这样写</span><br><span class=\"line\">import &#123; mapState &#125; from &apos;vuex&apos;;</span><br><span class=\"line\">import &#123; mapGetters, mapMutations &#125; from &apos;vuex&apos;; //如果需要引用多个时用这种方式处理</span><br></pre></td></tr></table></figure>\n<p>反复看上面的内容是不是就豁然开朗了接下来我们进行依次举例和用官方的语言描述</p>\n<p>State</p>\n<p>State负责存储整个应用的状态数据，一般需要在使用的时候在跟节点注入store对象，后期就可以使用this.$store.state直接获取状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//store为实例化生成的</span><br><span class=\"line\">import store from &apos;./store&apos; </span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &apos;#app&apos;,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: h =&gt; h(App)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这个store可以理解为一个容器，包含着应用中的state等。实例化生成store的过程是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//./store文件</span><br><span class=\"line\">const store = new Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;   //放置state的值</span><br><span class=\"line\">    count: 0,</span><br><span class=\"line\">    strLength:&quot;abcd234&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;   //放置getters方法</span><br><span class=\"line\">      strLength: state =&gt; state.aString.length</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;   //放置mutations方法</span><br><span class=\"line\">       mutationName(state) &#123;</span><br><span class=\"line\">          //在这里改变state中的数据</span><br><span class=\"line\">          state.count = 100;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 异步的数据操作</span><br><span class=\"line\">  actions: &#123;      //放置actions方法</span><br><span class=\"line\">       actionName(&#123; commit &#125;) &#123;</span><br><span class=\"line\">          //dosomething</span><br><span class=\"line\">         commit(&apos;mutationName&apos;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      getSong (&#123;commit&#125;, id) &#123;</span><br><span class=\"line\">          api.getMusicUrlResource(id).then(res =&gt; &#123;</span><br><span class=\"line\">            let url = res.data.data[0].url;</span><br><span class=\"line\">        </span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .catch((error) =&gt; &#123;  // 错误处理</span><br><span class=\"line\">              console.log(error);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">export default store;</span><br></pre></td></tr></table></figure>\n<p>后续在组件中使用的过程中，如果想要获取对应的状态你就可以直接使用this.$store.state获取，当然，也可以利用vuex提供的mapState辅助函数将state映射到计算属性中去，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import &#123;mapState&#125; from &apos;vuex&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;  //组件中</span><br><span class=\"line\">  computed: mapState(&#123;</span><br><span class=\"line\">    count: state =&gt; state.count</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Getters</p>\n<p>有些状态需要做二次处理，就可以使用getters。通过this.$store.getters.valueName对派生出来的状态进行访问。或者直接使用辅助函数mapGetters将其映射到本地计算属性中去。</p>\n<p>在组件中使用方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import &#123;mapGetters&#125; from &apos;vuex&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;  </span><br><span class=\"line\">computed: mapGetters([</span><br><span class=\"line\">&apos;strLength&apos;</span><br><span class=\"line\">])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Mutations</p>\n<p>Mutations的中文意思是“变化”，利用它可以更改状态，本质就是用来处理数据的函数，其接收唯一参数值state。store.commit(mutationName)是用来触发一个mutation的方法。需要记住的是，定义的mutation必须是同步函数，否则devtool中的数据将可能出现问题，使状态改变变得难以跟踪。</p>\n<p>在组件中触发：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    handleClick() &#123;</span><br><span class=\"line\">      this.$store.commit(&apos;mutationName&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者使用辅助函数mapMutations直接将触发函数映射到methods上，这样就能在元素事件绑定上直接使用了。如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import &#123;mapMutations&#125; from &apos;vuex&apos;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  methods: mapMutations([</span><br><span class=\"line\">    &apos;mutationName&apos;</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Actions</p>\n<p>Actions也可以用于改变状态，不过是通过触发mutation实现的，重要的是可以包含异步操作。其辅助函数是mapActions与mapMutations类似，也是绑定在组件的methods上的。如果选择直接触发的话，使用this.$store.dispatch(actionName)方法。</p>\n<p>在组件中使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import &#123;mapActions&#125; from &apos;vuex&apos;</span><br><span class=\"line\">//我是一个组件</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  methods: mapActions([</span><br><span class=\"line\">    &apos;actionName&apos;,</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Plugins</p>\n<p>插件就是一个钩子函数，在初始化store的时候引入即可。比较常用的是内置的logger插件，用于作为调试使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//写在./store文件中</span><br><span class=\"line\">import createLogger from &apos;vuex/dist/logger&apos;</span><br><span class=\"line\">const store = Vuex.Store(&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  plugins: [createLogger()]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"[随笔]总得写点什么","catalog":true,"date":"2018-12-07T02:48:57.000Z","subtitle":"随笔","header-img":null,"_content":"\n## 总得写点什么\n\n好像每一个拥有技术博客的人一般会在开篇写一篇关于为什么自己要建一个技术博客。就好比程序员在学一门新的语言，第一段代码总要写一个Hello World，以表示对这世界的尊重。\n\n​　　距离我创建独立域名的博客已经一年了，那时候还选择在10月24号这个程序员特殊的节日发布，并发表朋友圈说自己拥有了一个独立的自居地，可以写点技术文章或关于心情的东西，算是把自己“开源”出去了。然后一年的时间，技术的文章倒是写不少，关于心情的东西则一直不太想写，毕竟骨子里可能还是一个封闭的人，不太想把自己内心真实的想法公开出来，因为这些关于心情的文字，于自己于他人都不一定有什么好处，可能还给自己带来压力。\n\n​　　慢慢地，心态有了一些变化，不知道是好还是坏，想想还是写些回顾和思考，不用在乎那么多，或许本来也不必要在乎那么多。至于为什么要创建独立域名的博客，最早也并没有什么计划，而是把我之前写的一些学习笔记从个人笔记里面开放到外面出来。当个人学习笔记只有自己看的时候总会写的很随意，没什么条理。好比当你一个人在家的时候，总是不太喜欢收拾东西，乱七八糟的东西随便放，当有人要来你家的时候，则会提前把房间收拾得干干净净。于是，我先把学习笔记放到了CSDN上，后来在无意中看到了还有Github Page这种东西，就开始瞎折腾了。本来应该是先选技术再选主题，而我是先选主题再选技术，最后选出了一个自己认为比较好看的主题，最后就用了Hexo这种搭建框架。毕竟这还是一个看脸的世界！从知道到瞎折腾，到最后有一个独立的个人域名 www.zhangcy.club ，到个人博客浏览量不断上升，这中间花了很多很多的时间。学习不懂的东西总是这样，一开始觉得很牛逼，等到自己投入一定的精力后，并慢慢搞懂，想想也不过如此，然后好像就可以开始装逼了。\n\n​　　花费了这么多时间和精力，对我个人来说是否有什么影响，应该是说找到了一种比较笨的学习方式。写博客是很耗时间的，需要将你学习到的东西通过自己认为比较简练的语言归纳整理，并且有条理或系统地去让别人更容易读懂，在这过程中自己的总结归纳能力等可以得到锻炼，而有的知识你以为懂了，当要写出来的时候会发现好像还没懂，这时候也可以再去思考这个知识。当形成了自己的知识体系后，即时你哪天忘记了你写的内容，也可以很快的找到答案所在的地方。就好比开卷考试，当你记不住答案或者也不一定要记住答案是什么，只需要知道在哪里可以快速找到答案就够了。如果可以快速有效地解决问题，也不一定要关心你是怎么解决的。当你学的东西越来越多，你会发现你不懂的也越来越多，好比一个圆，圆内的面积越大，圆外接触的不懂的东西也越多。\n\n​　　写博客不难，难的是坚持下去。毕竟这要花挺多时间，你也可能因为写错，或者写的太low，被别人批评，写的东西没人看而带来各种压力。这时候想想你为什么写博客，或许就不会有太多的压力了。这边也推荐一篇最近刚好看到的文章：为什么你应该（从现在开始就）写博客。\n\n​　　再到后来，慢慢有了要打造个人品牌的想法，就是不断扩大你在某个知识领域的影响力，把自己销售出去。现在，在百度或谷歌搜索我的名字“张创业”三个字，第一条记录便是我的独立域名博客。当然个人品牌并不仅仅做博客这么简单，你做的所有事，获得的所有信任都会慢慢累积你的个人品牌，这是一个很漫长很艰难的过程，当最后有一天你的名字就是你的简历的时候，差不多也就完成目标了。而在这方面，想提起的一个人便是陆奇。\n\n​　　假如陆奇去面试，发生以下对话:\n\n​　　面试官问：嗯，你叫陆奇是吧，先做个一分钟的自我介绍吧，然后你上一份工作是工作了一年多就离职，好像不太稳定啊，可以说说为什么吗？\n\n​　　陆奇：…\n\n​　　（画外音：不好意思，面试官，您浪费了陆先生一分钟的时间，按照市场价您需要为这一分钟支付xxx美金，请问您是现金还是转账呢？）\n\n​　　当然，这是一个段子。而我们要知道的是，当你的能力真的可以达到陆奇那种程度的时候，其实就陆奇这两个字就已经很有价值和说服力了。而那时候你的时间可能就很值钱了，毕竟时间也是一种成本，而且是一种花掉就再也拿不回来的成本，也存在通货膨胀和通货紧缩。以前听说有的投资者做投资的时候是只投人不投项目，即看准了这个人，相信他的能力，相信他选择和做的项目，无论是什么项目都能成功，或者这次没有成功，下次，下下次也能成功，对这个人来说，只是时间问题。而只要有一次成功，回报就足以覆盖之前的失败。王兴可能就是这样的一个例子，曾经的校内网，饭否，和如今的美团。当然事后诸葛亮人人都会，谁知道贾跃亭是不是这样的人。所以真正厉害的可能还是那个看人的本领，这个人是否足够聪明，足够踏实，足够坚韧。\n\n​　　很多事情并不是你想做就可以做到的，而最难的是选择做什么，或称之为“做与不做”的问题，其次才是怎么去做。不同人可能都生活在一个自带加速度的成长环境中，有的人加速度为正，有的人加速度为负。当你在追赶一个加速度为正的人的时候，从一步落后可能就再无擦肩而过的机会了，你只能希望不要被越拉越远，或者可以有幸捡到一支98K和8倍镜，远远地将他“干掉”。\n\n​　　　物竞天择，适者生存。成者为王，败者为寇！人类来源于自然，多少还是会带来自然法则。这十六个字就当做自勉吧！\n\n​　　​　　　　　　　　　　　　　​　　​　　　　　　　　　　———于2018年12月07日","source":"_posts/something-has-to-be-written.md","raw":"---\ntitle: \"[随笔]总得写点什么\"\ncatalog: true\ndate: 2018-12-07 10:48:57\nsubtitle: 随笔\nheader-img:\ntags: 随笔\n---\n\n## 总得写点什么\n\n好像每一个拥有技术博客的人一般会在开篇写一篇关于为什么自己要建一个技术博客。就好比程序员在学一门新的语言，第一段代码总要写一个Hello World，以表示对这世界的尊重。\n\n​　　距离我创建独立域名的博客已经一年了，那时候还选择在10月24号这个程序员特殊的节日发布，并发表朋友圈说自己拥有了一个独立的自居地，可以写点技术文章或关于心情的东西，算是把自己“开源”出去了。然后一年的时间，技术的文章倒是写不少，关于心情的东西则一直不太想写，毕竟骨子里可能还是一个封闭的人，不太想把自己内心真实的想法公开出来，因为这些关于心情的文字，于自己于他人都不一定有什么好处，可能还给自己带来压力。\n\n​　　慢慢地，心态有了一些变化，不知道是好还是坏，想想还是写些回顾和思考，不用在乎那么多，或许本来也不必要在乎那么多。至于为什么要创建独立域名的博客，最早也并没有什么计划，而是把我之前写的一些学习笔记从个人笔记里面开放到外面出来。当个人学习笔记只有自己看的时候总会写的很随意，没什么条理。好比当你一个人在家的时候，总是不太喜欢收拾东西，乱七八糟的东西随便放，当有人要来你家的时候，则会提前把房间收拾得干干净净。于是，我先把学习笔记放到了CSDN上，后来在无意中看到了还有Github Page这种东西，就开始瞎折腾了。本来应该是先选技术再选主题，而我是先选主题再选技术，最后选出了一个自己认为比较好看的主题，最后就用了Hexo这种搭建框架。毕竟这还是一个看脸的世界！从知道到瞎折腾，到最后有一个独立的个人域名 www.zhangcy.club ，到个人博客浏览量不断上升，这中间花了很多很多的时间。学习不懂的东西总是这样，一开始觉得很牛逼，等到自己投入一定的精力后，并慢慢搞懂，想想也不过如此，然后好像就可以开始装逼了。\n\n​　　花费了这么多时间和精力，对我个人来说是否有什么影响，应该是说找到了一种比较笨的学习方式。写博客是很耗时间的，需要将你学习到的东西通过自己认为比较简练的语言归纳整理，并且有条理或系统地去让别人更容易读懂，在这过程中自己的总结归纳能力等可以得到锻炼，而有的知识你以为懂了，当要写出来的时候会发现好像还没懂，这时候也可以再去思考这个知识。当形成了自己的知识体系后，即时你哪天忘记了你写的内容，也可以很快的找到答案所在的地方。就好比开卷考试，当你记不住答案或者也不一定要记住答案是什么，只需要知道在哪里可以快速找到答案就够了。如果可以快速有效地解决问题，也不一定要关心你是怎么解决的。当你学的东西越来越多，你会发现你不懂的也越来越多，好比一个圆，圆内的面积越大，圆外接触的不懂的东西也越多。\n\n​　　写博客不难，难的是坚持下去。毕竟这要花挺多时间，你也可能因为写错，或者写的太low，被别人批评，写的东西没人看而带来各种压力。这时候想想你为什么写博客，或许就不会有太多的压力了。这边也推荐一篇最近刚好看到的文章：为什么你应该（从现在开始就）写博客。\n\n​　　再到后来，慢慢有了要打造个人品牌的想法，就是不断扩大你在某个知识领域的影响力，把自己销售出去。现在，在百度或谷歌搜索我的名字“张创业”三个字，第一条记录便是我的独立域名博客。当然个人品牌并不仅仅做博客这么简单，你做的所有事，获得的所有信任都会慢慢累积你的个人品牌，这是一个很漫长很艰难的过程，当最后有一天你的名字就是你的简历的时候，差不多也就完成目标了。而在这方面，想提起的一个人便是陆奇。\n\n​　　假如陆奇去面试，发生以下对话:\n\n​　　面试官问：嗯，你叫陆奇是吧，先做个一分钟的自我介绍吧，然后你上一份工作是工作了一年多就离职，好像不太稳定啊，可以说说为什么吗？\n\n​　　陆奇：…\n\n​　　（画外音：不好意思，面试官，您浪费了陆先生一分钟的时间，按照市场价您需要为这一分钟支付xxx美金，请问您是现金还是转账呢？）\n\n​　　当然，这是一个段子。而我们要知道的是，当你的能力真的可以达到陆奇那种程度的时候，其实就陆奇这两个字就已经很有价值和说服力了。而那时候你的时间可能就很值钱了，毕竟时间也是一种成本，而且是一种花掉就再也拿不回来的成本，也存在通货膨胀和通货紧缩。以前听说有的投资者做投资的时候是只投人不投项目，即看准了这个人，相信他的能力，相信他选择和做的项目，无论是什么项目都能成功，或者这次没有成功，下次，下下次也能成功，对这个人来说，只是时间问题。而只要有一次成功，回报就足以覆盖之前的失败。王兴可能就是这样的一个例子，曾经的校内网，饭否，和如今的美团。当然事后诸葛亮人人都会，谁知道贾跃亭是不是这样的人。所以真正厉害的可能还是那个看人的本领，这个人是否足够聪明，足够踏实，足够坚韧。\n\n​　　很多事情并不是你想做就可以做到的，而最难的是选择做什么，或称之为“做与不做”的问题，其次才是怎么去做。不同人可能都生活在一个自带加速度的成长环境中，有的人加速度为正，有的人加速度为负。当你在追赶一个加速度为正的人的时候，从一步落后可能就再无擦肩而过的机会了，你只能希望不要被越拉越远，或者可以有幸捡到一支98K和8倍镜，远远地将他“干掉”。\n\n​　　　物竞天择，适者生存。成者为王，败者为寇！人类来源于自然，多少还是会带来自然法则。这十六个字就当做自勉吧！\n\n​　　​　　　　　　　　　　　　　​　　​　　　　　　　　　　———于2018年12月07日","slug":"something-has-to-be-written","published":1,"updated":"2018-12-07T08:27:33.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpp5w6360003b1i4q7swoifg","content":"<h2 id=\"总得写点什么\">总得写点什么</h2>\n<p>好像每一个拥有技术博客的人一般会在开篇写一篇关于为什么自己要建一个技术博客。就好比程序员在学一门新的语言，第一段代码总要写一个Hello World，以表示对这世界的尊重。</p>\n<p>​　　距离我创建独立域名的博客已经一年了，那时候还选择在10月24号这个程序员特殊的节日发布，并发表朋友圈说自己拥有了一个独立的自居地，可以写点技术文章或关于心情的东西，算是把自己“开源”出去了。然后一年的时间，技术的文章倒是写不少，关于心情的东西则一直不太想写，毕竟骨子里可能还是一个封闭的人，不太想把自己内心真实的想法公开出来，因为这些关于心情的文字，于自己于他人都不一定有什么好处，可能还给自己带来压力。</p>\n<p>​　　慢慢地，心态有了一些变化，不知道是好还是坏，想想还是写些回顾和思考，不用在乎那么多，或许本来也不必要在乎那么多。至于为什么要创建独立域名的博客，最早也并没有什么计划，而是把我之前写的一些学习笔记从个人笔记里面开放到外面出来。当个人学习笔记只有自己看的时候总会写的很随意，没什么条理。好比当你一个人在家的时候，总是不太喜欢收拾东西，乱七八糟的东西随便放，当有人要来你家的时候，则会提前把房间收拾得干干净净。于是，我先把学习笔记放到了CSDN上，后来在无意中看到了还有Github Page这种东西，就开始瞎折腾了。本来应该是先选技术再选主题，而我是先选主题再选技术，最后选出了一个自己认为比较好看的主题，最后就用了Hexo这种搭建框架。毕竟这还是一个看脸的世界！从知道到瞎折腾，到最后有一个独立的个人域名 www.zhangcy.club ，到个人博客浏览量不断上升，这中间花了很多很多的时间。学习不懂的东西总是这样，一开始觉得很牛逼，等到自己投入一定的精力后，并慢慢搞懂，想想也不过如此，然后好像就可以开始装逼了。</p>\n<p>​　　花费了这么多时间和精力，对我个人来说是否有什么影响，应该是说找到了一种比较笨的学习方式。写博客是很耗时间的，需要将你学习到的东西通过自己认为比较简练的语言归纳整理，并且有条理或系统地去让别人更容易读懂，在这过程中自己的总结归纳能力等可以得到锻炼，而有的知识你以为懂了，当要写出来的时候会发现好像还没懂，这时候也可以再去思考这个知识。当形成了自己的知识体系后，即时你哪天忘记了你写的内容，也可以很快的找到答案所在的地方。就好比开卷考试，当你记不住答案或者也不一定要记住答案是什么，只需要知道在哪里可以快速找到答案就够了。如果可以快速有效地解决问题，也不一定要关心你是怎么解决的。当你学的东西越来越多，你会发现你不懂的也越来越多，好比一个圆，圆内的面积越大，圆外接触的不懂的东西也越多。</p>\n<p>​　　写博客不难，难的是坚持下去。毕竟这要花挺多时间，你也可能因为写错，或者写的太low，被别人批评，写的东西没人看而带来各种压力。这时候想想你为什么写博客，或许就不会有太多的压力了。这边也推荐一篇最近刚好看到的文章：为什么你应该（从现在开始就）写博客。</p>\n<p>​　　再到后来，慢慢有了要打造个人品牌的想法，就是不断扩大你在某个知识领域的影响力，把自己销售出去。现在，在百度或谷歌搜索我的名字“张创业”三个字，第一条记录便是我的独立域名博客。当然个人品牌并不仅仅做博客这么简单，你做的所有事，获得的所有信任都会慢慢累积你的个人品牌，这是一个很漫长很艰难的过程，当最后有一天你的名字就是你的简历的时候，差不多也就完成目标了。而在这方面，想提起的一个人便是陆奇。</p>\n<p>​　　假如陆奇去面试，发生以下对话:</p>\n<p>​　　面试官问：嗯，你叫陆奇是吧，先做个一分钟的自我介绍吧，然后你上一份工作是工作了一年多就离职，好像不太稳定啊，可以说说为什么吗？</p>\n<p>​　　陆奇：…</p>\n<p>​　　（画外音：不好意思，面试官，您浪费了陆先生一分钟的时间，按照市场价您需要为这一分钟支付xxx美金，请问您是现金还是转账呢？）</p>\n<p>​　　当然，这是一个段子。而我们要知道的是，当你的能力真的可以达到陆奇那种程度的时候，其实就陆奇这两个字就已经很有价值和说服力了。而那时候你的时间可能就很值钱了，毕竟时间也是一种成本，而且是一种花掉就再也拿不回来的成本，也存在通货膨胀和通货紧缩。以前听说有的投资者做投资的时候是只投人不投项目，即看准了这个人，相信他的能力，相信他选择和做的项目，无论是什么项目都能成功，或者这次没有成功，下次，下下次也能成功，对这个人来说，只是时间问题。而只要有一次成功，回报就足以覆盖之前的失败。王兴可能就是这样的一个例子，曾经的校内网，饭否，和如今的美团。当然事后诸葛亮人人都会，谁知道贾跃亭是不是这样的人。所以真正厉害的可能还是那个看人的本领，这个人是否足够聪明，足够踏实，足够坚韧。</p>\n<p>​　　很多事情并不是你想做就可以做到的，而最难的是选择做什么，或称之为“做与不做”的问题，其次才是怎么去做。不同人可能都生活在一个自带加速度的成长环境中，有的人加速度为正，有的人加速度为负。当你在追赶一个加速度为正的人的时候，从一步落后可能就再无擦肩而过的机会了，你只能希望不要被越拉越远，或者可以有幸捡到一支98K和8倍镜，远远地将他“干掉”。</p>\n<p>​　　　物竞天择，适者生存。成者为王，败者为寇！人类来源于自然，多少还是会带来自然法则。这十六个字就当做自勉吧！</p>\n<p>​　　​　　　　　　　　　　　　　​　　​　　　　　　　　　　———于2018年12月07日</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>总得写点什么</h2>\n<p>好像每一个拥有技术博客的人一般会在开篇写一篇关于为什么自己要建一个技术博客。就好比程序员在学一门新的语言，第一段代码总要写一个Hello World，以表示对这世界的尊重。</p>\n<p>​　　距离我创建独立域名的博客已经一年了，那时候还选择在10月24号这个程序员特殊的节日发布，并发表朋友圈说自己拥有了一个独立的自居地，可以写点技术文章或关于心情的东西，算是把自己“开源”出去了。然后一年的时间，技术的文章倒是写不少，关于心情的东西则一直不太想写，毕竟骨子里可能还是一个封闭的人，不太想把自己内心真实的想法公开出来，因为这些关于心情的文字，于自己于他人都不一定有什么好处，可能还给自己带来压力。</p>\n<p>​　　慢慢地，心态有了一些变化，不知道是好还是坏，想想还是写些回顾和思考，不用在乎那么多，或许本来也不必要在乎那么多。至于为什么要创建独立域名的博客，最早也并没有什么计划，而是把我之前写的一些学习笔记从个人笔记里面开放到外面出来。当个人学习笔记只有自己看的时候总会写的很随意，没什么条理。好比当你一个人在家的时候，总是不太喜欢收拾东西，乱七八糟的东西随便放，当有人要来你家的时候，则会提前把房间收拾得干干净净。于是，我先把学习笔记放到了CSDN上，后来在无意中看到了还有Github Page这种东西，就开始瞎折腾了。本来应该是先选技术再选主题，而我是先选主题再选技术，最后选出了一个自己认为比较好看的主题，最后就用了Hexo这种搭建框架。毕竟这还是一个看脸的世界！从知道到瞎折腾，到最后有一个独立的个人域名 www.zhangcy.club ，到个人博客浏览量不断上升，这中间花了很多很多的时间。学习不懂的东西总是这样，一开始觉得很牛逼，等到自己投入一定的精力后，并慢慢搞懂，想想也不过如此，然后好像就可以开始装逼了。</p>\n<p>​　　花费了这么多时间和精力，对我个人来说是否有什么影响，应该是说找到了一种比较笨的学习方式。写博客是很耗时间的，需要将你学习到的东西通过自己认为比较简练的语言归纳整理，并且有条理或系统地去让别人更容易读懂，在这过程中自己的总结归纳能力等可以得到锻炼，而有的知识你以为懂了，当要写出来的时候会发现好像还没懂，这时候也可以再去思考这个知识。当形成了自己的知识体系后，即时你哪天忘记了你写的内容，也可以很快的找到答案所在的地方。就好比开卷考试，当你记不住答案或者也不一定要记住答案是什么，只需要知道在哪里可以快速找到答案就够了。如果可以快速有效地解决问题，也不一定要关心你是怎么解决的。当你学的东西越来越多，你会发现你不懂的也越来越多，好比一个圆，圆内的面积越大，圆外接触的不懂的东西也越多。</p>\n<p>​　　写博客不难，难的是坚持下去。毕竟这要花挺多时间，你也可能因为写错，或者写的太low，被别人批评，写的东西没人看而带来各种压力。这时候想想你为什么写博客，或许就不会有太多的压力了。这边也推荐一篇最近刚好看到的文章：为什么你应该（从现在开始就）写博客。</p>\n<p>​　　再到后来，慢慢有了要打造个人品牌的想法，就是不断扩大你在某个知识领域的影响力，把自己销售出去。现在，在百度或谷歌搜索我的名字“张创业”三个字，第一条记录便是我的独立域名博客。当然个人品牌并不仅仅做博客这么简单，你做的所有事，获得的所有信任都会慢慢累积你的个人品牌，这是一个很漫长很艰难的过程，当最后有一天你的名字就是你的简历的时候，差不多也就完成目标了。而在这方面，想提起的一个人便是陆奇。</p>\n<p>​　　假如陆奇去面试，发生以下对话:</p>\n<p>​　　面试官问：嗯，你叫陆奇是吧，先做个一分钟的自我介绍吧，然后你上一份工作是工作了一年多就离职，好像不太稳定啊，可以说说为什么吗？</p>\n<p>​　　陆奇：…</p>\n<p>​　　（画外音：不好意思，面试官，您浪费了陆先生一分钟的时间，按照市场价您需要为这一分钟支付xxx美金，请问您是现金还是转账呢？）</p>\n<p>​　　当然，这是一个段子。而我们要知道的是，当你的能力真的可以达到陆奇那种程度的时候，其实就陆奇这两个字就已经很有价值和说服力了。而那时候你的时间可能就很值钱了，毕竟时间也是一种成本，而且是一种花掉就再也拿不回来的成本，也存在通货膨胀和通货紧缩。以前听说有的投资者做投资的时候是只投人不投项目，即看准了这个人，相信他的能力，相信他选择和做的项目，无论是什么项目都能成功，或者这次没有成功，下次，下下次也能成功，对这个人来说，只是时间问题。而只要有一次成功，回报就足以覆盖之前的失败。王兴可能就是这样的一个例子，曾经的校内网，饭否，和如今的美团。当然事后诸葛亮人人都会，谁知道贾跃亭是不是这样的人。所以真正厉害的可能还是那个看人的本领，这个人是否足够聪明，足够踏实，足够坚韧。</p>\n<p>​　　很多事情并不是你想做就可以做到的，而最难的是选择做什么，或称之为“做与不做”的问题，其次才是怎么去做。不同人可能都生活在一个自带加速度的成长环境中，有的人加速度为正，有的人加速度为负。当你在追赶一个加速度为正的人的时候，从一步落后可能就再无擦肩而过的机会了，你只能希望不要被越拉越远，或者可以有幸捡到一支98K和8倍镜，远远地将他“干掉”。</p>\n<p>​　　　物竞天择，适者生存。成者为王，败者为寇！人类来源于自然，多少还是会带来自然法则。这十六个字就当做自勉吧！</p>\n<p>​　　​　　　　　　　　　　　　　​　　​　　　　　　　　　　———于2018年12月07日</p>\n"},{"title":"[WEB技术]浏览器中常见网络协议介绍","catalog":true,"date":"2018-12-08T08:33:11.000Z","subtitle":"WEB技术","header-img":null,"_content":"\n上周五我在公司有一个关于《HTTP 协议》的培训，只有两个小时，估计能讲到的东西不会太多。实际上，浏览器为了完成 WEB 应用的各项功能，需要跟各种网络协议打交道，HTTP 只是其中一种。本文会介绍浏览器中常见的网络协议，以及各种协议之间的关系。\n\n我们经常会听到「TCP/IP 协议」这个名词，从字面上看，有人会认为它专指 TCP 和 IP 两种协议。实际上大多数情况，TCP/IP 协议指的是整个网际协议族（Internet Protocol Suite），是利用 IP 协议进行通讯的其他协议统称。TCP/IP 包含的协议众多，还有一个分层模型。相比较 OSI 模型，TCP/IP 的分层更简单，从下到上分别为：物理层、数据链路层、网络层、传输层和应用层。\n\nIP（Internet Protocol）属于网络层协议，负责联网主机之间的路由选择和寻址。IPv4 中的 4 指的是 TCP/IP 协议的第 4 个版本，直到这个版本，IP 协议才单独拆出来，所以并没有单独的 IPv1 - IPv3。而 IPv5 分给了一个没什么进展的试验性协议，所以下一个版本的 IP 协议变成了 IPv6。\n\nTCP（Transmission Control Protocol）和 UDP（User Datagram Protocol）是整个 TCP/IP 协议中最重要的两个传输层协议。TCP 是面向连接的、可靠的流协议；UDP 是不具有可靠性的数据报协议。后面可以看到，对可靠性要求比较高的上层协议一般会基于 TCP；而对高速传输和实时性有较高要求的上层协议一般会基于 UDP。\n\n介绍完比较低层的 IP、TCP 和 UDP 之后，下面看几个浏览器中常见的应用层协议。\n\n### HTTP 与 WebSocket\n\nHTTP 协议是浏览器需要用到的最重要的网络协议，它包括很多版本，例如最常见的 HTTP/1.1，刚刚发布的 HTTP/2，还有 Google 实现的过渡版本 SPDY 等等。本文不讨论 HTTP 的细节以及各版本之间的差异，只打算列出 HTTP 与其他协议 / 应用之间的关系，见下图：\n\n<img src=/img/浏览器中常见网络协议介绍/WX20181208-163842@2x.png>\n\n从上图可以看出 HTTP 是在 TCP 之上实现的，所以 HTTP 中并不需要关注数据传输的可靠性，类似于顺序控制、重发这样的机制在传输层已经有了。同时，HTTP 也拥有 TCP 的一些缺点，给 WEB 性能优化带来挑战。\n\nXHR（XmlHTTPRequest）和 SSE（Server-Sent Events）都是浏览器提供的数据交互功能，它们的本质都还是 HTTP。XHR 是 Ajax 技术的核心，大家都很熟，这里略过不讨论；SSE 概念还算新，多说几句。我们知道 HTTP 只能由客户端发起请求，再由服务端响应。SSE 也是这样，只不过服务端会保持住这个 HTTP 连接，多次发送响应，不像平时发送完响应就结束了。实际上，很早之前在 WebIM 中类似的 HTTP 长连接技术就已经很盛行了，有兴趣的同学可以看下这篇八年前的文章：Comet：基于 HTTP 长连接的「服务器推」技术。\n\n既然 XHR 和 SSE 本质都是 HTTP 连接，所以 HTTP 协议中一些常见概念，例如请求方式（GET、POST 等），请求响应头部（Cookie、内容编码、传输编码、缓存等）等等，依然存在。\n\n而 WS（WebSocket）是直接基于 TCP 实现的，HTTP 协议中的那些概念都不复存在。需要注意的是，从前面图表中可以看出，它还是依赖于 HTTP，这是因为 WebSocket 握手利用了 HTTP 的 Upgrade 机制。一旦握手完成，后续数据传输就直接在 TCP 上完成。浏览器中新协议借助 HTTP 作为引导，是一个较为普遍的做法。\n\nTLS（Transport Layer Security，传输层安全），作用是保证数据在传输过程中的完整性和保密性，属于可选项。启用了 TLS 之后，HTTP 协议的 URL 前缀需要由 http:// 改成 https://；WebSocket 协议的 URL 前缀需要由 ws:// 改成 wss://。\n\n### DNS\n\nDNS（Domain Name System），就是大家熟知的域名解析服务，提供了从域名到 IP 的转换。浏览器中大部分网络交互都会使用域名，而传输层协议需要的是 IP，所以 DNS 是基础。\n\n<img src=/img/浏览器中常见网络协议介绍/WX20181208-163922@2x.png>\n\nDNS 服务默认使用 UDP 协议获得查询结果，通常仅当结果超过 512 字节或者进行 DNS 服务器同步时才会使用 TCP 协议。这是因为 DNS 的使用非常频繁，又是基础，响应速度是优先需要考虑的。使用 UDP 可以满足速度上的要求，但同时也引入了类似于「DNS 缓存投毒」这类问题。\n\n### WebRTC\n\nWebRTC（Web Real-Time Communication）出现之前，DNS 几乎是浏览器唯一使用的基于 UDP 的协议。WebRTC 提供的三大功能中，MediaStream 与网络无关，RTCPeerConnection 和 RTCDataChannel 都是基于 UDP，如图：\n\n<img src=/img/浏览器中常见网络协议介绍/WX20181208-163941@2x.png>\n\n这个图比较复杂，我们从下往上介绍：\n\nICE（Interactive Connectivity Establishment）框架，作用是在端与端之间建立一条有效的通道，优先直连，其次用 STUN 协商，再不行只能用 TURN 转发：\n\nSTUN（Session Traversal Utilities for NAT）协议，解决了三个问题：1）获得外网 IP 和端口；2）在 NAT 中建立路由条目，绑定外网端口，使得到达外网 IP 和端口的入站分组能找到应用程序，不被丢弃；3）定义了一个简单的 keep-alive 机制，保证 NAT 路由条目不会因为超时而被删除。STUN 服务器必须架设在公网上，可以自己搭建，也可以使用第三方提供的公开服务，例如 Google 的「stun:stun.l.google.com:19302」。\nTURN（Traversal Using Relays around NAT）协议，依赖外网中继设备在两端之间传递数据。简单说就是通过两端都可以访问的 TURN 服务转发消息，间接把两端连起来。\nDTLS（Datagram Transport Layer Security，数据报传输层安全），本质上就是 TLS，只是为了兼容 UDP 的数据报传输而做了一些微小的修改，可以简单把它理解为 UDP 版的 TLS。\n\n再往上就兵分两路，一路的目标是 RTCPeerConnection，负责音频和视频数据通信，对传输速度和实时性有很高的要求，这里又有两个新的协议出现：\n\nSRTP（Secure Real-time Transport Protocol，安全实时传输协议）。WebRTC 中的音频和视频等实时数据都是通过这个协议传输。它是 RTP 协议的安全版。\nSRTCP（Secure Real-Time Control Transport Protocol，安全实时控制传输协议）。它会跟踪 SRTP 的运行情况，以便调整每个流的发送速率、编码品质和其他参数。它是 RTCP 协议的安全版。\n另一路的目标是 RTCDataChannel，用来在端到端之间传输任意应用数据，SRTP 是专门为传输媒体数据为设计的，不适合传输应用数据，所以这里又需要一个新的协议：\n\nSCTP（Stream Control Transmission Protocol，流控制传输协议）。本身 SCTP 是一个传输层协议，直接运行在 IP 协议之上，与 TCP 和 UDP 类似。但在 WebRTC 这里，SCTP 却运行于 DTLS 之上。SCTP 很好的一点是提供了交付属性选项，使用者可以指定消息是有序还是乱序，是可靠还是部分可靠，部分可靠时还可以指定使用超时重传还是计数重传策略。\nQUIC\nGoogle 正在试验一种新的传输层协议：QUIC（Quick UDP Internet Connections），它的本质是基于 UDP 实现 HTTP，相当于之前的 TCP + TLS。从目前的资料来看，QUIC 可以大幅减少建立连接的时间，这是通过简化握手步骤从而减少 RTT（Round-Trip Time）来实现的，类似于 TFO（TCP Fast Open）。有兴趣的同学可以点这个连接围观，据说 Google 自家服务来自 Chrome 的请求中，已经有 50% 使用了 QUIC 协议。\n\n最后表达下对 Google 的佩服。Google 为了优化 WEB 性能，在浏览器（Chrome）、排版引擎（Blink）、JS 引擎（V8）、图片格式（WebP）、传输层协议（TCP 的 TFO，QUIC）、应用层协议（SPDY）以及 HTML5（从 Google Gears 开始）等等方面都做了大量努力，实在是技术型公司典范，叹为观止！","source":"_posts/浏览器中常见网络协议介绍.md","raw":"---\ntitle: \"[WEB技术]浏览器中常见网络协议介绍\"\ncatalog: true\ndate: 2018-12-08 16:33:11\nsubtitle: WEB技术\nheader-img: \ntags: WEB技术\n---\n\n上周五我在公司有一个关于《HTTP 协议》的培训，只有两个小时，估计能讲到的东西不会太多。实际上，浏览器为了完成 WEB 应用的各项功能，需要跟各种网络协议打交道，HTTP 只是其中一种。本文会介绍浏览器中常见的网络协议，以及各种协议之间的关系。\n\n我们经常会听到「TCP/IP 协议」这个名词，从字面上看，有人会认为它专指 TCP 和 IP 两种协议。实际上大多数情况，TCP/IP 协议指的是整个网际协议族（Internet Protocol Suite），是利用 IP 协议进行通讯的其他协议统称。TCP/IP 包含的协议众多，还有一个分层模型。相比较 OSI 模型，TCP/IP 的分层更简单，从下到上分别为：物理层、数据链路层、网络层、传输层和应用层。\n\nIP（Internet Protocol）属于网络层协议，负责联网主机之间的路由选择和寻址。IPv4 中的 4 指的是 TCP/IP 协议的第 4 个版本，直到这个版本，IP 协议才单独拆出来，所以并没有单独的 IPv1 - IPv3。而 IPv5 分给了一个没什么进展的试验性协议，所以下一个版本的 IP 协议变成了 IPv6。\n\nTCP（Transmission Control Protocol）和 UDP（User Datagram Protocol）是整个 TCP/IP 协议中最重要的两个传输层协议。TCP 是面向连接的、可靠的流协议；UDP 是不具有可靠性的数据报协议。后面可以看到，对可靠性要求比较高的上层协议一般会基于 TCP；而对高速传输和实时性有较高要求的上层协议一般会基于 UDP。\n\n介绍完比较低层的 IP、TCP 和 UDP 之后，下面看几个浏览器中常见的应用层协议。\n\n### HTTP 与 WebSocket\n\nHTTP 协议是浏览器需要用到的最重要的网络协议，它包括很多版本，例如最常见的 HTTP/1.1，刚刚发布的 HTTP/2，还有 Google 实现的过渡版本 SPDY 等等。本文不讨论 HTTP 的细节以及各版本之间的差异，只打算列出 HTTP 与其他协议 / 应用之间的关系，见下图：\n\n<img src=/img/浏览器中常见网络协议介绍/WX20181208-163842@2x.png>\n\n从上图可以看出 HTTP 是在 TCP 之上实现的，所以 HTTP 中并不需要关注数据传输的可靠性，类似于顺序控制、重发这样的机制在传输层已经有了。同时，HTTP 也拥有 TCP 的一些缺点，给 WEB 性能优化带来挑战。\n\nXHR（XmlHTTPRequest）和 SSE（Server-Sent Events）都是浏览器提供的数据交互功能，它们的本质都还是 HTTP。XHR 是 Ajax 技术的核心，大家都很熟，这里略过不讨论；SSE 概念还算新，多说几句。我们知道 HTTP 只能由客户端发起请求，再由服务端响应。SSE 也是这样，只不过服务端会保持住这个 HTTP 连接，多次发送响应，不像平时发送完响应就结束了。实际上，很早之前在 WebIM 中类似的 HTTP 长连接技术就已经很盛行了，有兴趣的同学可以看下这篇八年前的文章：Comet：基于 HTTP 长连接的「服务器推」技术。\n\n既然 XHR 和 SSE 本质都是 HTTP 连接，所以 HTTP 协议中一些常见概念，例如请求方式（GET、POST 等），请求响应头部（Cookie、内容编码、传输编码、缓存等）等等，依然存在。\n\n而 WS（WebSocket）是直接基于 TCP 实现的，HTTP 协议中的那些概念都不复存在。需要注意的是，从前面图表中可以看出，它还是依赖于 HTTP，这是因为 WebSocket 握手利用了 HTTP 的 Upgrade 机制。一旦握手完成，后续数据传输就直接在 TCP 上完成。浏览器中新协议借助 HTTP 作为引导，是一个较为普遍的做法。\n\nTLS（Transport Layer Security，传输层安全），作用是保证数据在传输过程中的完整性和保密性，属于可选项。启用了 TLS 之后，HTTP 协议的 URL 前缀需要由 http:// 改成 https://；WebSocket 协议的 URL 前缀需要由 ws:// 改成 wss://。\n\n### DNS\n\nDNS（Domain Name System），就是大家熟知的域名解析服务，提供了从域名到 IP 的转换。浏览器中大部分网络交互都会使用域名，而传输层协议需要的是 IP，所以 DNS 是基础。\n\n<img src=/img/浏览器中常见网络协议介绍/WX20181208-163922@2x.png>\n\nDNS 服务默认使用 UDP 协议获得查询结果，通常仅当结果超过 512 字节或者进行 DNS 服务器同步时才会使用 TCP 协议。这是因为 DNS 的使用非常频繁，又是基础，响应速度是优先需要考虑的。使用 UDP 可以满足速度上的要求，但同时也引入了类似于「DNS 缓存投毒」这类问题。\n\n### WebRTC\n\nWebRTC（Web Real-Time Communication）出现之前，DNS 几乎是浏览器唯一使用的基于 UDP 的协议。WebRTC 提供的三大功能中，MediaStream 与网络无关，RTCPeerConnection 和 RTCDataChannel 都是基于 UDP，如图：\n\n<img src=/img/浏览器中常见网络协议介绍/WX20181208-163941@2x.png>\n\n这个图比较复杂，我们从下往上介绍：\n\nICE（Interactive Connectivity Establishment）框架，作用是在端与端之间建立一条有效的通道，优先直连，其次用 STUN 协商，再不行只能用 TURN 转发：\n\nSTUN（Session Traversal Utilities for NAT）协议，解决了三个问题：1）获得外网 IP 和端口；2）在 NAT 中建立路由条目，绑定外网端口，使得到达外网 IP 和端口的入站分组能找到应用程序，不被丢弃；3）定义了一个简单的 keep-alive 机制，保证 NAT 路由条目不会因为超时而被删除。STUN 服务器必须架设在公网上，可以自己搭建，也可以使用第三方提供的公开服务，例如 Google 的「stun:stun.l.google.com:19302」。\nTURN（Traversal Using Relays around NAT）协议，依赖外网中继设备在两端之间传递数据。简单说就是通过两端都可以访问的 TURN 服务转发消息，间接把两端连起来。\nDTLS（Datagram Transport Layer Security，数据报传输层安全），本质上就是 TLS，只是为了兼容 UDP 的数据报传输而做了一些微小的修改，可以简单把它理解为 UDP 版的 TLS。\n\n再往上就兵分两路，一路的目标是 RTCPeerConnection，负责音频和视频数据通信，对传输速度和实时性有很高的要求，这里又有两个新的协议出现：\n\nSRTP（Secure Real-time Transport Protocol，安全实时传输协议）。WebRTC 中的音频和视频等实时数据都是通过这个协议传输。它是 RTP 协议的安全版。\nSRTCP（Secure Real-Time Control Transport Protocol，安全实时控制传输协议）。它会跟踪 SRTP 的运行情况，以便调整每个流的发送速率、编码品质和其他参数。它是 RTCP 协议的安全版。\n另一路的目标是 RTCDataChannel，用来在端到端之间传输任意应用数据，SRTP 是专门为传输媒体数据为设计的，不适合传输应用数据，所以这里又需要一个新的协议：\n\nSCTP（Stream Control Transmission Protocol，流控制传输协议）。本身 SCTP 是一个传输层协议，直接运行在 IP 协议之上，与 TCP 和 UDP 类似。但在 WebRTC 这里，SCTP 却运行于 DTLS 之上。SCTP 很好的一点是提供了交付属性选项，使用者可以指定消息是有序还是乱序，是可靠还是部分可靠，部分可靠时还可以指定使用超时重传还是计数重传策略。\nQUIC\nGoogle 正在试验一种新的传输层协议：QUIC（Quick UDP Internet Connections），它的本质是基于 UDP 实现 HTTP，相当于之前的 TCP + TLS。从目前的资料来看，QUIC 可以大幅减少建立连接的时间，这是通过简化握手步骤从而减少 RTT（Round-Trip Time）来实现的，类似于 TFO（TCP Fast Open）。有兴趣的同学可以点这个连接围观，据说 Google 自家服务来自 Chrome 的请求中，已经有 50% 使用了 QUIC 协议。\n\n最后表达下对 Google 的佩服。Google 为了优化 WEB 性能，在浏览器（Chrome）、排版引擎（Blink）、JS 引擎（V8）、图片格式（WebP）、传输层协议（TCP 的 TFO，QUIC）、应用层协议（SPDY）以及 HTML5（从 Google Gears 开始）等等方面都做了大量努力，实在是技术型公司典范，叹为观止！","slug":"浏览器中常见网络协议介绍","published":1,"updated":"2018-12-08T08:47:38.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpp5w63a0006b1i47m58843y","content":"<p>上周五我在公司有一个关于《HTTP 协议》的培训，只有两个小时，估计能讲到的东西不会太多。实际上，浏览器为了完成 WEB 应用的各项功能，需要跟各种网络协议打交道，HTTP 只是其中一种。本文会介绍浏览器中常见的网络协议，以及各种协议之间的关系。</p>\n<p>我们经常会听到「TCP/IP 协议」这个名词，从字面上看，有人会认为它专指 TCP 和 IP 两种协议。实际上大多数情况，TCP/IP 协议指的是整个网际协议族（Internet Protocol Suite），是利用 IP 协议进行通讯的其他协议统称。TCP/IP 包含的协议众多，还有一个分层模型。相比较 OSI 模型，TCP/IP 的分层更简单，从下到上分别为：物理层、数据链路层、网络层、传输层和应用层。</p>\n<p>IP（Internet Protocol）属于网络层协议，负责联网主机之间的路由选择和寻址。IPv4 中的 4 指的是 TCP/IP 协议的第 4 个版本，直到这个版本，IP 协议才单独拆出来，所以并没有单独的 IPv1 - IPv3。而 IPv5 分给了一个没什么进展的试验性协议，所以下一个版本的 IP 协议变成了 IPv6。</p>\n<p>TCP（Transmission Control Protocol）和 UDP（User Datagram Protocol）是整个 TCP/IP 协议中最重要的两个传输层协议。TCP 是面向连接的、可靠的流协议；UDP 是不具有可靠性的数据报协议。后面可以看到，对可靠性要求比较高的上层协议一般会基于 TCP；而对高速传输和实时性有较高要求的上层协议一般会基于 UDP。</p>\n<p>介绍完比较低层的 IP、TCP 和 UDP 之后，下面看几个浏览器中常见的应用层协议。</p>\n<h3 id=\"http-与-websocket\">HTTP 与 WebSocket</h3>\n<p>HTTP 协议是浏览器需要用到的最重要的网络协议，它包括很多版本，例如最常见的 HTTP/1.1，刚刚发布的 HTTP/2，还有 Google 实现的过渡版本 SPDY 等等。本文不讨论 HTTP 的细节以及各版本之间的差异，只打算列出 HTTP 与其他协议 / 应用之间的关系，见下图：</p>\n<img src=\"/img/浏览器中常见网络协议介绍/WX20181208-163842@2x.png\">\n<p>从上图可以看出 HTTP 是在 TCP 之上实现的，所以 HTTP 中并不需要关注数据传输的可靠性，类似于顺序控制、重发这样的机制在传输层已经有了。同时，HTTP 也拥有 TCP 的一些缺点，给 WEB 性能优化带来挑战。</p>\n<p>XHR（XmlHTTPRequest）和 SSE（Server-Sent Events）都是浏览器提供的数据交互功能，它们的本质都还是 HTTP。XHR 是 Ajax 技术的核心，大家都很熟，这里略过不讨论；SSE 概念还算新，多说几句。我们知道 HTTP 只能由客户端发起请求，再由服务端响应。SSE 也是这样，只不过服务端会保持住这个 HTTP 连接，多次发送响应，不像平时发送完响应就结束了。实际上，很早之前在 WebIM 中类似的 HTTP 长连接技术就已经很盛行了，有兴趣的同学可以看下这篇八年前的文章：Comet：基于 HTTP 长连接的「服务器推」技术。</p>\n<p>既然 XHR 和 SSE 本质都是 HTTP 连接，所以 HTTP 协议中一些常见概念，例如请求方式（GET、POST 等），请求响应头部（Cookie、内容编码、传输编码、缓存等）等等，依然存在。</p>\n<p>而 WS（WebSocket）是直接基于 TCP 实现的，HTTP 协议中的那些概念都不复存在。需要注意的是，从前面图表中可以看出，它还是依赖于 HTTP，这是因为 WebSocket 握手利用了 HTTP 的 Upgrade 机制。一旦握手完成，后续数据传输就直接在 TCP 上完成。浏览器中新协议借助 HTTP 作为引导，是一个较为普遍的做法。</p>\n<p>TLS（Transport Layer Security，传输层安全），作用是保证数据在传输过程中的完整性和保密性，属于可选项。启用了 TLS 之后，HTTP 协议的 URL 前缀需要由 http:// 改成 https://；WebSocket 协议的 URL 前缀需要由 ws:// 改成 wss://。</p>\n<h3 id=\"dns\">DNS</h3>\n<p>DNS（Domain Name System），就是大家熟知的域名解析服务，提供了从域名到 IP 的转换。浏览器中大部分网络交互都会使用域名，而传输层协议需要的是 IP，所以 DNS 是基础。</p>\n<img src=\"/img/浏览器中常见网络协议介绍/WX20181208-163922@2x.png\">\n<p>DNS 服务默认使用 UDP 协议获得查询结果，通常仅当结果超过 512 字节或者进行 DNS 服务器同步时才会使用 TCP 协议。这是因为 DNS 的使用非常频繁，又是基础，响应速度是优先需要考虑的。使用 UDP 可以满足速度上的要求，但同时也引入了类似于「DNS 缓存投毒」这类问题。</p>\n<h3 id=\"webrtc\">WebRTC</h3>\n<p>WebRTC（Web Real-Time Communication）出现之前，DNS 几乎是浏览器唯一使用的基于 UDP 的协议。WebRTC 提供的三大功能中，MediaStream 与网络无关，RTCPeerConnection 和 RTCDataChannel 都是基于 UDP，如图：</p>\n<img src=\"/img/浏览器中常见网络协议介绍/WX20181208-163941@2x.png\">\n<p>这个图比较复杂，我们从下往上介绍：</p>\n<p>ICE（Interactive Connectivity Establishment）框架，作用是在端与端之间建立一条有效的通道，优先直连，其次用 STUN 协商，再不行只能用 TURN 转发：</p>\n<p>STUN（Session Traversal Utilities for NAT）协议，解决了三个问题：1）获得外网 IP 和端口；2）在 NAT 中建立路由条目，绑定外网端口，使得到达外网 IP 和端口的入站分组能找到应用程序，不被丢弃；3）定义了一个简单的 keep-alive 机制，保证 NAT 路由条目不会因为超时而被删除。STUN 服务器必须架设在公网上，可以自己搭建，也可以使用第三方提供的公开服务，例如 Google 的「stun:stun.l.google.com:19302」。<br>\nTURN（Traversal Using Relays around NAT）协议，依赖外网中继设备在两端之间传递数据。简单说就是通过两端都可以访问的 TURN 服务转发消息，间接把两端连起来。<br>\nDTLS（Datagram Transport Layer Security，数据报传输层安全），本质上就是 TLS，只是为了兼容 UDP 的数据报传输而做了一些微小的修改，可以简单把它理解为 UDP 版的 TLS。</p>\n<p>再往上就兵分两路，一路的目标是 RTCPeerConnection，负责音频和视频数据通信，对传输速度和实时性有很高的要求，这里又有两个新的协议出现：</p>\n<p>SRTP（Secure Real-time Transport Protocol，安全实时传输协议）。WebRTC 中的音频和视频等实时数据都是通过这个协议传输。它是 RTP 协议的安全版。<br>\nSRTCP（Secure Real-Time Control Transport Protocol，安全实时控制传输协议）。它会跟踪 SRTP 的运行情况，以便调整每个流的发送速率、编码品质和其他参数。它是 RTCP 协议的安全版。<br>\n另一路的目标是 RTCDataChannel，用来在端到端之间传输任意应用数据，SRTP 是专门为传输媒体数据为设计的，不适合传输应用数据，所以这里又需要一个新的协议：</p>\n<p>SCTP（Stream Control Transmission Protocol，流控制传输协议）。本身 SCTP 是一个传输层协议，直接运行在 IP 协议之上，与 TCP 和 UDP 类似。但在 WebRTC 这里，SCTP 却运行于 DTLS 之上。SCTP 很好的一点是提供了交付属性选项，使用者可以指定消息是有序还是乱序，是可靠还是部分可靠，部分可靠时还可以指定使用超时重传还是计数重传策略。<br>\nQUIC<br>\nGoogle 正在试验一种新的传输层协议：QUIC（Quick UDP Internet Connections），它的本质是基于 UDP 实现 HTTP，相当于之前的 TCP + TLS。从目前的资料来看，QUIC 可以大幅减少建立连接的时间，这是通过简化握手步骤从而减少 RTT（Round-Trip Time）来实现的，类似于 TFO（TCP Fast Open）。有兴趣的同学可以点这个连接围观，据说 Google 自家服务来自 Chrome 的请求中，已经有 50% 使用了 QUIC 协议。</p>\n<p>最后表达下对 Google 的佩服。Google 为了优化 WEB 性能，在浏览器（Chrome）、排版引擎（Blink）、JS 引擎（V8）、图片格式（WebP）、传输层协议（TCP 的 TFO，QUIC）、应用层协议（SPDY）以及 HTML5（从 Google Gears 开始）等等方面都做了大量努力，实在是技术型公司典范，叹为观止！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上周五我在公司有一个关于《HTTP 协议》的培训，只有两个小时，估计能讲到的东西不会太多。实际上，浏览器为了完成 WEB 应用的各项功能，需要跟各种网络协议打交道，HTTP 只是其中一种。本文会介绍浏览器中常见的网络协议，以及各种协议之间的关系。</p>\n<p>我们经常会听到「TCP/IP 协议」这个名词，从字面上看，有人会认为它专指 TCP 和 IP 两种协议。实际上大多数情况，TCP/IP 协议指的是整个网际协议族（Internet Protocol Suite），是利用 IP 协议进行通讯的其他协议统称。TCP/IP 包含的协议众多，还有一个分层模型。相比较 OSI 模型，TCP/IP 的分层更简单，从下到上分别为：物理层、数据链路层、网络层、传输层和应用层。</p>\n<p>IP（Internet Protocol）属于网络层协议，负责联网主机之间的路由选择和寻址。IPv4 中的 4 指的是 TCP/IP 协议的第 4 个版本，直到这个版本，IP 协议才单独拆出来，所以并没有单独的 IPv1 - IPv3。而 IPv5 分给了一个没什么进展的试验性协议，所以下一个版本的 IP 协议变成了 IPv6。</p>\n<p>TCP（Transmission Control Protocol）和 UDP（User Datagram Protocol）是整个 TCP/IP 协议中最重要的两个传输层协议。TCP 是面向连接的、可靠的流协议；UDP 是不具有可靠性的数据报协议。后面可以看到，对可靠性要求比较高的上层协议一般会基于 TCP；而对高速传输和实时性有较高要求的上层协议一般会基于 UDP。</p>\n<p>介绍完比较低层的 IP、TCP 和 UDP 之后，下面看几个浏览器中常见的应用层协议。</p>\n<h3>HTTP 与 WebSocket</h3>\n<p>HTTP 协议是浏览器需要用到的最重要的网络协议，它包括很多版本，例如最常见的 HTTP/1.1，刚刚发布的 HTTP/2，还有 Google 实现的过渡版本 SPDY 等等。本文不讨论 HTTP 的细节以及各版本之间的差异，只打算列出 HTTP 与其他协议 / 应用之间的关系，见下图：</p>\n<img src=\"/img/浏览器中常见网络协议介绍/WX20181208-163842@2x.png\">\n<p>从上图可以看出 HTTP 是在 TCP 之上实现的，所以 HTTP 中并不需要关注数据传输的可靠性，类似于顺序控制、重发这样的机制在传输层已经有了。同时，HTTP 也拥有 TCP 的一些缺点，给 WEB 性能优化带来挑战。</p>\n<p>XHR（XmlHTTPRequest）和 SSE（Server-Sent Events）都是浏览器提供的数据交互功能，它们的本质都还是 HTTP。XHR 是 Ajax 技术的核心，大家都很熟，这里略过不讨论；SSE 概念还算新，多说几句。我们知道 HTTP 只能由客户端发起请求，再由服务端响应。SSE 也是这样，只不过服务端会保持住这个 HTTP 连接，多次发送响应，不像平时发送完响应就结束了。实际上，很早之前在 WebIM 中类似的 HTTP 长连接技术就已经很盛行了，有兴趣的同学可以看下这篇八年前的文章：Comet：基于 HTTP 长连接的「服务器推」技术。</p>\n<p>既然 XHR 和 SSE 本质都是 HTTP 连接，所以 HTTP 协议中一些常见概念，例如请求方式（GET、POST 等），请求响应头部（Cookie、内容编码、传输编码、缓存等）等等，依然存在。</p>\n<p>而 WS（WebSocket）是直接基于 TCP 实现的，HTTP 协议中的那些概念都不复存在。需要注意的是，从前面图表中可以看出，它还是依赖于 HTTP，这是因为 WebSocket 握手利用了 HTTP 的 Upgrade 机制。一旦握手完成，后续数据传输就直接在 TCP 上完成。浏览器中新协议借助 HTTP 作为引导，是一个较为普遍的做法。</p>\n<p>TLS（Transport Layer Security，传输层安全），作用是保证数据在传输过程中的完整性和保密性，属于可选项。启用了 TLS 之后，HTTP 协议的 URL 前缀需要由 http:// 改成 https://；WebSocket 协议的 URL 前缀需要由 ws:// 改成 wss://。</p>\n<h3>DNS</h3>\n<p>DNS（Domain Name System），就是大家熟知的域名解析服务，提供了从域名到 IP 的转换。浏览器中大部分网络交互都会使用域名，而传输层协议需要的是 IP，所以 DNS 是基础。</p>\n<img src=\"/img/浏览器中常见网络协议介绍/WX20181208-163922@2x.png\">\n<p>DNS 服务默认使用 UDP 协议获得查询结果，通常仅当结果超过 512 字节或者进行 DNS 服务器同步时才会使用 TCP 协议。这是因为 DNS 的使用非常频繁，又是基础，响应速度是优先需要考虑的。使用 UDP 可以满足速度上的要求，但同时也引入了类似于「DNS 缓存投毒」这类问题。</p>\n<h3>WebRTC</h3>\n<p>WebRTC（Web Real-Time Communication）出现之前，DNS 几乎是浏览器唯一使用的基于 UDP 的协议。WebRTC 提供的三大功能中，MediaStream 与网络无关，RTCPeerConnection 和 RTCDataChannel 都是基于 UDP，如图：</p>\n<img src=\"/img/浏览器中常见网络协议介绍/WX20181208-163941@2x.png\">\n<p>这个图比较复杂，我们从下往上介绍：</p>\n<p>ICE（Interactive Connectivity Establishment）框架，作用是在端与端之间建立一条有效的通道，优先直连，其次用 STUN 协商，再不行只能用 TURN 转发：</p>\n<p>STUN（Session Traversal Utilities for NAT）协议，解决了三个问题：1）获得外网 IP 和端口；2）在 NAT 中建立路由条目，绑定外网端口，使得到达外网 IP 和端口的入站分组能找到应用程序，不被丢弃；3）定义了一个简单的 keep-alive 机制，保证 NAT 路由条目不会因为超时而被删除。STUN 服务器必须架设在公网上，可以自己搭建，也可以使用第三方提供的公开服务，例如 Google 的「stun:stun.l.google.com:19302」。<br>\nTURN（Traversal Using Relays around NAT）协议，依赖外网中继设备在两端之间传递数据。简单说就是通过两端都可以访问的 TURN 服务转发消息，间接把两端连起来。<br>\nDTLS（Datagram Transport Layer Security，数据报传输层安全），本质上就是 TLS，只是为了兼容 UDP 的数据报传输而做了一些微小的修改，可以简单把它理解为 UDP 版的 TLS。</p>\n<p>再往上就兵分两路，一路的目标是 RTCPeerConnection，负责音频和视频数据通信，对传输速度和实时性有很高的要求，这里又有两个新的协议出现：</p>\n<p>SRTP（Secure Real-time Transport Protocol，安全实时传输协议）。WebRTC 中的音频和视频等实时数据都是通过这个协议传输。它是 RTP 协议的安全版。<br>\nSRTCP（Secure Real-Time Control Transport Protocol，安全实时控制传输协议）。它会跟踪 SRTP 的运行情况，以便调整每个流的发送速率、编码品质和其他参数。它是 RTCP 协议的安全版。<br>\n另一路的目标是 RTCDataChannel，用来在端到端之间传输任意应用数据，SRTP 是专门为传输媒体数据为设计的，不适合传输应用数据，所以这里又需要一个新的协议：</p>\n<p>SCTP（Stream Control Transmission Protocol，流控制传输协议）。本身 SCTP 是一个传输层协议，直接运行在 IP 协议之上，与 TCP 和 UDP 类似。但在 WebRTC 这里，SCTP 却运行于 DTLS 之上。SCTP 很好的一点是提供了交付属性选项，使用者可以指定消息是有序还是乱序，是可靠还是部分可靠，部分可靠时还可以指定使用超时重传还是计数重传策略。<br>\nQUIC<br>\nGoogle 正在试验一种新的传输层协议：QUIC（Quick UDP Internet Connections），它的本质是基于 UDP 实现 HTTP，相当于之前的 TCP + TLS。从目前的资料来看，QUIC 可以大幅减少建立连接的时间，这是通过简化握手步骤从而减少 RTT（Round-Trip Time）来实现的，类似于 TFO（TCP Fast Open）。有兴趣的同学可以点这个连接围观，据说 Google 自家服务来自 Chrome 的请求中，已经有 50% 使用了 QUIC 协议。</p>\n<p>最后表达下对 Google 的佩服。Google 为了优化 WEB 性能，在浏览器（Chrome）、排版引擎（Blink）、JS 引擎（V8）、图片格式（WebP）、传输层协议（TCP 的 TFO，QUIC）、应用层协议（SPDY）以及 HTML5（从 Google Gears 开始）等等方面都做了大量努力，实在是技术型公司典范，叹为观止！</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjpp5w6310001b1i4ihzp96vp","tag_id":"cjpp5w6390005b1i4gueziu69","_id":"cjpp5w63d0008b1i4yat3a6pp"},{"post_id":"cjpp5w6360003b1i4q7swoifg","tag_id":"cjpp5w63c0007b1i44acyy9hu","_id":"cjpp5w63g000ab1i4znv75x1b"},{"post_id":"cjpp5w63a0006b1i47m58843y","tag_id":"cjpp5w6390005b1i4gueziu69","_id":"cjpp5w63g000bb1i4cjqjo0x8"}],"Tag":[{"name":"WEB技术","_id":"cjpp5w6390005b1i4gueziu69"},{"name":"随笔","_id":"cjpp5w63c0007b1i44acyy9hu"}]}}